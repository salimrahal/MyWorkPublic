/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package progressbar;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingWorker;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author salim
 */
public class formProgress extends javax.swing.JFrame implements PropertyChangeListener {

    /**
     * Creates new form formProgress
     */
    public formProgress() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        startjButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        value_int = new javax.swing.JTextField();
        resetJbutton = new javax.swing.JButton();
        resTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jProgressBar1.setStringPainted(true);

        startjButton.setText("start");
        startjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startjButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("result:");

        value_int.setText("enter int value");

        resetJbutton.setText("reset");
        resetJbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetJbuttonActionPerformed(evt);
            }
        });

        resTextField.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addComponent(startjButton)
                .addGap(34, 34, 34)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                .addComponent(resetJbutton)
                .addGap(44, 44, 44))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(2, 2, 2)
                        .addComponent(resTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(value_int, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 267, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(startjButton)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetJbutton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(value_int, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(resTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(178, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startjButtonActionPerformed
        //run the progress bar
    /*
        resetJbutton.doClick();
        int num = Integer.valueOf(value_int.getText());
        jProgressBar1.setValue(num);
       */
        int numbersToFind = 9;
        PrimeNumbersTask task = new PrimeNumbersTask(resTextField, numbersToFind, jProgressBar1);
        //task.addPropertyChangeListener(this);
        task.execute();
        try {
            System.out.println("getting results:" + task.get());
        } catch (InterruptedException interruptedException) {
        } catch (ExecutionException executionException) {
        }

        /*
        for (int i = 0; i < 100; i++) {
            jProgressBar1.setValue(i++);
            try {
                Thread.sleep(100);
            } catch (InterruptedException ex) {
                Logger.getLogger(formProgress.class.getName()).log(Level.SEVERE, null, ex);
            }
        }*/


    }//GEN-LAST:event_startjButtonActionPerformed

    private void resetJbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetJbuttonActionPerformed
        int val = 0;
        jProgressBar1.setValue(val);
    }//GEN-LAST:event_resetJbuttonActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(formProgress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(formProgress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(formProgress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(formProgress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new formProgress().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    public javax.swing.JProgressBar jProgressBar1;
    public javax.swing.JTextField resTextField;
    private javax.swing.JButton resetJbutton;
    private javax.swing.JButton startjButton;
    private javax.swing.JTextField value_int;
    // End of variables declaration//GEN-END:variables

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

//    @Override
//
//    public void propertyChange(PropertyChangeEvent evt) {
//        System.out.println("propertyChange invoked.." + evt.getPropertyName());
//        if ("progress" == evt.getPropertyName()) {
//            int progress = (Integer) evt.getNewValue();
//            System.out.println("propertyChange: progress=" + progress);
//            jProgressBar1.setValue(progress);
//
//        }
//    }
    
    /*****************SwingWorker***********************/
class PrimeNumbersTask extends
         SwingWorker<List<Integer>, Integer>  {
    
    JTextField textfield;
     JProgressBar progressbar;
    private int numbersToFind; 
    private List<Integer> numbers = new ArrayList<Integer>(); 
    private int number = 0; 
    private final int myLimit; 
    private int myLimitCounter; 
    boolean enough = false; 
    
     PrimeNumbersTask(JTextField textfield, int numbersToFind,JProgressBar progressbar) {
         System.out.println("PrimeNumbersTask calling constructor");
         this.textfield = textfield; 
         this.progressbar = progressbar;
        this.numbersToFind = numbersToFind; 
        this.myLimit = numbersToFind; 
                /* change listener for progress bar*/
        jProgressBar1.addChangeListener(new BoundedChangeListener());
     }


     @Override
     public List<Integer> doInBackground() {
          int progress = 0;
             System.out.println("PrimeNumbersTask calling doInBackground()");
         while (! enough && ! isCancelled()) {
                 number = nextPrimeNumber();
                 //send the data chunk tp the process(List<>), in order to push them immediately
                 progress = number;
                 progressbar.setValue(number);
                 System.out.println("PrimeNumbersTask calling doInBackground(): progress="+progress);
                 publish(number);
                 setProgress(100 * numbers.size() / numbersToFind);
             }
         return numbers;
     }
     
     

     @Override
     protected void process(List<Integer> chunks) {
            System.out.println("PrimeNumbersTask calling process()");
         for (int number : chunks) {
             textfield.setText(String.valueOf(number));//  textArea.append(number + "\n");
         }
     }
     
      //in my case next natural number 
    private int nextPrimeNumber() { 
         System.out.println("PrimeNumbersTask calling nextPrimeNumber()");
        //end condition 
        if (++myLimitCounter >= myLimit) { 
            enough = true; 
        } 
        try { 
            Thread.sleep(1000); 
        } catch (InterruptedException ex) { 
            // 
        } 
        return (++number); 
    }
    
      /**
     * Invoked when task's progress property changes.
     */
//    public void propertyChange(PropertyChangeEvent evt) {
//        System.out.println("propertyChange invoked..");
//        if ("progress" == evt.getPropertyName()) {
//            int progress = (Integer) evt.getNewValue();
//               System.out.println("propertyChange: progress="+progress);
//               progressbar.setValue(progress);
//           
//        } 
//    }
 }

//the below model doesn't update the UI in parallele with a background model
class BoundedChangeListener implements ChangeListener {
  public void stateChanged(ChangeEvent changeEvent) {
    Object source = changeEvent.getSource();
    if (source instanceof JProgressBar) {
      JProgressBar theJProgressBar = (JProgressBar) source;
      System.out.println("ProgressBar changed: " + theJProgressBar.getValue());
      theJProgressBar.setValue(theJProgressBar.getValue());//sr
    } else {
      System.out.println("Something changed: " + source);
    }
  }
}

}
