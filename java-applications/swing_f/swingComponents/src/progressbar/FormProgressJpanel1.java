/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package progressbar;

import java.awt.Cursor;
import java.awt.Toolkit;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ExecutionException;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingWorker;

/**
 *
 * @author salim
 * progress bar is not Note working
 */
public class FormProgressJpanel1 extends javax.swing.JPanel implements PropertyChangeListener {

    private PrimeNumbersTaskL task;

    /**
     * Creates new form FormProgressJpanel
     */
    public FormProgressJpanel1() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startjButton = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        resetJbutton = new javax.swing.JButton();
        value_int = new javax.swing.JTextField();
        resTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        startjButton.setText("start");
        startjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startjButtonActionPerformed(evt);
            }
        });

        jProgressBar1.setStringPainted(true);

        resetJbutton.setText("reset");
        resetJbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetJbuttonActionPerformed(evt);
            }
        });

        value_int.setText("enter int value");

        resTextField.setText("0");

        jLabel1.setText("result:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addComponent(startjButton)
                .addGap(34, 34, 34)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                .addComponent(resetJbutton)
                .addGap(44, 44, 44))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(2, 2, 2)
                        .addComponent(resTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(value_int, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 290, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(startjButton)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetJbutton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(value_int, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(resTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(178, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void startjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startjButtonActionPerformed

        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        //Instances of javax.swing.SwingWorker are not reusuable, so
        //we create new instances as needed.
        int numberTofind = 9;
        task = new PrimeNumbersTaskL(resTextField, numberTofind);
        task.addPropertyChangeListener(this);
        task.execute();
        try {
            System.out.println(task.get()); //prints all prime numbers we have got
        } catch (InterruptedException interruptedException) {
        } catch (ExecutionException executionException) {
        }
    }//GEN-LAST:event_startjButtonActionPerformed

    private void resetJbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetJbuttonActionPerformed
        int val = 0;
        jProgressBar1.setValue(val);
    }//GEN-LAST:event_resetJbuttonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    public javax.swing.JProgressBar jProgressBar1;
    public javax.swing.JTextField resTextField;
    private javax.swing.JButton resetJbutton;
    private javax.swing.JButton startjButton;
    private javax.swing.JTextField value_int;
    // End of variables declaration//GEN-END:variables

    /**
     * Invoked when task's progress property changes.
     *
     * @param evt
     */
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        System.out.println("propertyChange invoked..");
        if ("progress" == evt.getPropertyName()) {
            int progress = (Integer) evt.getNewValue();
            System.out.println("propertyChange: progress=" + progress);
            jProgressBar1.setValue(progress);

        }
    }

    class PrimeNumbersTaskL extends
            SwingWorker<List<Integer>, Integer> {

        JTextField textfield;
        private int numbersToFind;
        private List<Integer> numbers = new ArrayList<Integer>();
        private int number = 0;
        private final int myLimit;
        private int myLimitCounter;
        boolean enough = false;

        PrimeNumbersTaskL(JTextField textfield, int numbersToFind) {
            System.out.println("PrimeNumbersTask calling constructor");
            this.textfield = textfield;
            this.numbersToFind = numbersToFind;
            this.myLimit = numbersToFind;
        }

        @Override
        public List<Integer> doInBackground() {
            int progress = 0;
            System.out.println("PrimeNumbersTask calling doInBackground()");
            while (!enough && !isCancelled()) {
                number = nextPrimeNumber();
                //send the data chunk tp the process(List<>), in order to push them immediately
                progress = number;
                System.out.println("PrimeNumbersTask calling doInBackground(): progress=" + progress);
                publish(number);
                setProgress(100 * numbers.size() / numbersToFind);
            }
            return numbers;
        }

        @Override
        protected void process(List<Integer> chunks) {
            System.out.println("PrimeNumbersTask calling process()");
            for (int number : chunks) {
                textfield.setText(String.valueOf(number));//  textArea.append(number + "\n");
            }
        }

        //in my case next natural number 
        private int nextPrimeNumber() {
            System.out.println("PrimeNumbersTask calling nextPrimeNumber()");
            //end condition 
            if (++myLimitCounter >= myLimit) {
                enough = true;
            }
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                // 
            }
            return (++number);
        }

    }

}
