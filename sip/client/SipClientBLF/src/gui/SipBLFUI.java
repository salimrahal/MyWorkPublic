/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import bo.SipClientBO;
import bo.xmlparser.ConfBO;
import buddyListplugin.buddylist.BuddyAdapter;
import buddyListplugin.buddylist.BuddyCellRenderer;
import controller.ClientController;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sip.message.Request;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import buddyListplugin.buddylist.Buddy;
import java.awt.Color;
import vo.BuddyList;
import vo.ConfVO;
import vo.PrintWriterObj;
import vo.Status;

/**
 *
 * @author salim
 *
 * Copyright (c) 2014, Salim A. Rahal,Alexander Bedard, safirasoft.com. All
 * rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * Neither the names of Salim A. Rahal,Alexander Bedard, safirasoft.com, nor the
 * names of its contributors may be used to endorse or promote products derived
 * from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE. This is a BSD License approved by the
 * createSipFrameWork Source Initiative (OSI). See:
 * http://www.opensource.org/licenses/bsd-license.php
 */
public class SipBLFUI extends javax.swing.JFrame {

    /**
     * Creates new form SipBLFUI
     */
    public static ClientController sipClientController;
//// Objects keeping local configuration.
    //Extract the config File
    //ConfVO confVO = ConfBO.retrieveConfigurations("./conf/properties.xml");
    /**
     * ******UI Parameters: **********
     */
    //unused, here, those value from the UI
    //  String requestURITextField = "sip:" + extLocal + "@" + ipServer + ":" + portServer;
    /* Subscribe to URI  **/
    // String requestURITSubTo = "sip:112@173.231.103.38:5060";
    //
    PrintWriterObj printSingleton = null;
    //declare the logs static var 
    PrintWriter logsPW = null;
    PrintWriter dialogPW = null;

    public SipBLFUI() {
        initComponents();
    }

    public static ClientController getSipClientController() {
        return sipClientController;
    }

    public static void setSipClientController(ClientController sipClientController) {
        SipBLFUI.sipClientController = sipClientController;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        logs = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        onRegister = new javax.swing.JButton();
        onSubscribe = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        sipURISubscribeTO = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        Quit = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        regisSipURI = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        statusJlabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuEdit = new javax.swing.JMenu();
        SettingsMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jLabel1.setText("Contact List");

        logs.setColumns(20);
        logs.setRows(5);
        jScrollPane2.setViewportView(logs);

        jLabel2.setText("Logs");

        onRegister.setText("Sign In");
        onRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onRegisterActionPerformed(evt);
            }
        });

        onSubscribe.setText("Watch");
        onSubscribe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSubscribeActionPerformed(evt);
            }
        });

        jLabel3.setText("Watch");

        jLabel4.setText("Registered SIP");

        Quit.setText("Quit");
        Quit.setToolTipText("");
        Quit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuitActionPerformed(evt);
            }
        });

        jLabel5.setBackground(new java.awt.Color(210, 121, 31));
        jLabel5.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel5.setText("SIP - BLF");
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jList1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(jList1);

        regisSipURI.setText("SIP URI");
        regisSipURI.setToolTipText("");

        statusLabel.setText("SIP Status");

        statusJlabel.setForeground(new java.awt.Color(220, 15, 15));
        statusJlabel.setText("DISCONNECTED");
        statusJlabel.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                statusJlabelPropertyChange(evt);
            }
        });

        jMenuFile.setText("File");
        jMenuBar1.add(jMenuFile);

        jMenuEdit.setText("Edit");

        SettingsMenuItem.setText("Settings");
        SettingsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SettingsMenuItemActionPerformed(evt);
            }
        });
        jMenuEdit.add(SettingsMenuItem);

        jMenuBar1.add(jMenuEdit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(171, Short.MAX_VALUE)
                .addComponent(onRegister)
                .addGap(18, 18, 18)
                .addComponent(onSubscribe)
                .addGap(18, 18, 18)
                .addComponent(Quit, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(statusLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(sipURISubscribeTO)
                            .addComponent(regisSipURI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(statusJlabel)
                                .addGap(105, 105, 105)
                                .addComponent(jLabel7)))))
                .addGap(60, 60, 60))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(regisSipURI))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusLabel)
                    .addComponent(jLabel7)
                    .addComponent(statusJlabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(sipURISubscribeTO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(onRegister)
                    .addComponent(onSubscribe)
                    .addComponent(Quit))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onSubscribeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSubscribeActionPerformed
        //get the config Object
        ConfVO confVO = ConfVO.getInstance();
        //get the input
        String sipcommaSep = this.sipURISubscribeTO.getText();

        //1: retrieve the Sip list comma seperated from the text field, and build the array,
        //then send a successive Subscribe request to those extensions
        ArrayList<Buddy> buddyList = BuddyList.generateAsBuddyList(sipcommaSep);
//        ConfVO confVO = ConfVO.getInstance();
//        confVO.setExtsToMonitor(sipArr);
//ArrayList<Buddy> buddyList = BuddyList.generateAsBuddyList("298,112, 140,299");
        //add new List
        DefaultListModel listModel = new DefaultListModel();
        // Add the buddies to the list: by defauld: Status: OFFLINE
        for (Buddy buddy : buddyList) {
            listModel.addElement(buddy);
        }
        //instantiate the celle renderer once
        BuddyCellRenderer bcr = null;
        if (bcr == null) {
            bcr = new BuddyCellRenderer(new BuddyAdapter());
            System.out.println("processRequest : initializeBuddyCellRenderer");
        }
        //update the UI to reflect the status of the SIPIDs
        jList1.setCellRenderer(bcr);
        jList1.setPrototypeCellValue(buddyList.get(0));

        jList1.setModel(listModel);
        System.out.println("onSubscribeActionPerformed Lised Added");
        try {
            String res = null;
            if (getSipClientController() == null) {

                JOptionPane.showMessageDialog(this, "Sign In First!", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                //subscribe
                res = getSipClientController().subscribeMultiple(buddyList, null, SipClientBO.Expires_default);
            }
            this.logs.append(res);

            //overwite config the xml file with the new extension to monitor fields
            confVO.setExtsToMonitor(sipcommaSep);
            ConfBO.overwriteXMLConfig();
        } catch (Exception ex) {
            Logger.getLogger(SipBLFUI.class.getName()).log(Level.SEVERE, null, ex);
            this.logs.append(ex.getLocalizedMessage());//ok
        }

    }//GEN-LAST:event_onSubscribeActionPerformed

    private void onRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onRegisterActionPerformed
        //TODO: put the status Connected upon registration
        /*
         If the user attempt to sign in using the default config file, we initialize the SIP Stack and listener here
         **/
        if (getSipClientController() == null) {
            try {
                sipClientController = new ClientController();
                sipClientController.createSipStack();
                sipClientController.createSipFrameWork();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getLocalizedMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                sipClientController = null;
            }
        }

        try {
            //read the conf 
            ConfVO confVO = ConfVO.getInstance();
            System.out.println("SIP BLF Frame conf=" + confVO.toString());
            //build the register URI from the config
            //local SIP URI taken from the config
            String sipURIRegisterstr = ConfBO.getRegisteredSipURI(); //"sip:" + extLocal + "@" + ipServer + ":" + portlocal;

            //temporary read from text field: sipURIRegisterstr: is same used for FROM and TO SIP URI
            //String sipURIRegisterstr = this.sipURIRegister.getText();
            Request req = null;
            if (getSipClientController() == null) {
                JOptionPane.showMessageDialog(this, "Please Save your Settings First:Go to: Edit->Settings", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                req = getSipClientController().registerStateful(sipURIRegisterstr, null, SipClientBO.Expires_default);
                // req = getSipClientController().sendOptions(sipURIRegisterstr, null);
            }

            //append the request to the UI
            this.logs.append(req.toString());//ok
        } catch (Exception ex) {

            this.logs.append(ex.getLocalizedMessage());//ok
            Logger.getLogger(SipBLFUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_onRegisterActionPerformed

    /*
     * Some global static variable are invoked by this method:
     * 1- presence List and hashMap
     * 2- Log writers
     */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // A method called when you open your application.

        /*Load the default config :
         1- load (parse: xml->POJO) the singleton
         * 3- 
         * otherwise, nothing to retreive, the user should fill Settings  
         * */
        try {
            //parse the default  or existing config file to POJO
            ConfBO.parseConfVO();
            //get the config Object
            ConfVO confVO = ConfVO.getInstance();
            //fill the sip registered and extension to monitor text fields
            SipBLFUI.regisSipURI.setText(ConfBO.getRegisteredSipURI());

            //fill the Watch field         
            //read from conf and get the initial sip to watch from it.
            String sipcommaSep = "";
            if (confVO.getExtsToMonitor() != null) {
                sipcommaSep = confVO.getExtsToMonitor();
                this.sipURISubscribeTO.setText(sipcommaSep);
            } else {
                this.sipURISubscribeTO.setText("sipId1,sipId2,etc");
            }

            printSingleton = PrintWriterObj.getInstance();

            //create log files upon file open : its invoked once for app lauching       
            logsPW = PrintWriterObj.createErrorPrintWriter();
            dialogPW = PrintWriterObj.createSipLogPrintWriter();
            // Display the local IP address and port in the text area.
            this.logs.append("Local address: " + ConfVO.getInstance().getUACIp() + ":" + ConfVO.getInstance().getUACPort() + "\n");
        } catch (Exception e) {
            // If an error occurs, display an error message box and exit.
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            //get PW error logs static var
            PrintWriter pw = printSingleton.getErrorLogsPW();
            try {
                PrintWriterObj.writePrintWriter(pw, e.getMessage());
            } catch (Exception ex) {
                Logger.getLogger(SipBLFUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            System.exit(-1);
        }
    }//GEN-LAST:event_formWindowOpened

    private void QuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuitActionPerformed
        //  add your handling code here:
        //close the writer
        PrintWriterObj.closePrintWriters();
        System.exit(0);
        //terminate 
    }//GEN-LAST:event_QuitActionPerformed

    private void SettingsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SettingsMenuItemActionPerformed

        //System.out.println("SettingsMenuItemActionPerformed");
         /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SettingsUI().setVisible(true);
            }
        });
    }//GEN-LAST:event_SettingsMenuItemActionPerformed

    /*
     * it called whatever the windows is active, the process responsable to update the buddy list could be implemented here
     */
    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        System.out.println("formWindowActivated:First invokation ");
//        Thread thread = new Thread(new Runnable() {
//            @Override
//            public void run() {
//                while (true) {
//                    try {
//                        String statusStr = Status.getStatus();
//                        statusJlabel.setText(statusStr);
//                        if (statusStr.equalsIgnoreCase(Status.STATUS.CONNECTED.toString())) {
//                            statusJlabel.setForeground(Color.GREEN);
//                        } else {
//                            statusJlabel.setForeground(Color.RED);
//                        }
//                        Thread.sleep(5 * 1000);
//                    } catch (InterruptedException ex) {
//                        Logger.getLogger(SipBLFUI.class.getName()).log(Level.SEVERE, null, ex);
//                    }
//                }//end while
//            }
//        });
//        thread.start();
    }//GEN-LAST:event_formWindowActivated
/*
    Desc: it revalidate the property to the jlabel status in order to take effect on the GUI,
    */
    private void statusJlabelPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_statusJlabelPropertyChange
        try {
            // TODO add your handling code here:
            String msg = "+SIPBLF instance: property changed ="+statusJlabel.getText()+"/"+statusJlabel.getForeground().toString();
            System.out.println(msg);
            String text = statusJlabel.getText();
            Color statuscolor = statusJlabel.getForeground();
             PrintWriterObj.writePrintWriter(dialogPW,"Revalidating the properties");
            //revalidate the properties
            statusJlabel.setText(text);
            statusJlabel.setForeground(statuscolor);
            PrintWriterObj.writePrintWriter(dialogPW,msg);
            
        } catch (Exception ex) {
            Logger.getLogger(SipBLFUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_statusJlabelPropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SipBLFUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SipBLFUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SipBLFUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SipBLFUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SipBLFUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Quit;
    private javax.swing.JMenuItem SettingsMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    public static javax.swing.JList jList1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTextArea logs;
    private javax.swing.JButton onRegister;
    private javax.swing.JButton onSubscribe;
    public static javax.swing.JLabel regisSipURI;
    private javax.swing.JTextField sipURISubscribeTO;
    public static javax.swing.JLabel statusJlabel;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables
}
