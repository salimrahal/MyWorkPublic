/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 * * Copyright (c) 2014, Salim A. Rahal,Alexander Bedard, safirasoft.com.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 	* Redistributions of source code must retain the above copyright
 * 	  notice, this list of conditions and the following disclaimer.
 *
 * 	* Redistributions in binary form must reproduce the above
 * 	  copyright notice, this list of conditions and the following
 * 	  disclaimer in the documentation and/or other materials provided
 * 	  with the distribution.
 *
 * 	* Neither the names of Salim A. Rahal,Alexander Bedard, safirasoft.com, nor
 * 	  the names of its contributors may be used to endorse or promote
 * 	  products derived from this software without specific prior
 * 	  written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 * This is a BSD License approved by the createSipFrameWork Source Initiative (OSI).
 * See:  http://www.opensource.org/licenses/bsd-license.php
 */
package gui;

import bo.xmlparser.ConfBO;
import controller.ClientController;
import static gui.SipBLFUI.sipClientController;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.stream.XMLStreamException;
import vo.ConfVO;
import vo.PrintWriterObj;

/**
 *
 * @author salim
 */
public class SettingsUI extends javax.swing.JFrame {

    /**
     * Creates new form Settings
     */
    PrintWriterObj printSingleton = null;
    
    public SettingsUI() {
        initComponents();
        //get the instance of the Singleton PrintWriter
        printSingleton = PrintWriterObj.getInstance();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        settingsSaveButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        uASPort = new javax.swing.JTextField();
        localIp = new javax.swing.JTextField();
        localSipPort = new javax.swing.JTextField();
        sipID = new javax.swing.JTextField();
        domain = new javax.swing.JTextField();
        sipAthusername = new javax.swing.JTextField();
        UUIDLocalMachine = new javax.swing.JTextField();
        transportProtocol = new javax.swing.JTextField();
        sipAuthPssd = new javax.swing.JTextField();
        closeButton = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        hostNameLocal = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        uASIP = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        settingsSaveButton.setText("Save");
        settingsSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsSaveButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Settings");

        jLabel2.setText("SIP-SERVER-IP");

        jLabel3.setText("SIP-SERVER-PORT");

        jLabel4.setText("Local-IP");

        jLabel5.setText("SIP-LOCAL-PORT");

        jLabel6.setText("SIP-ID");

        jLabel7.setText("Realm/Domain");

        jLabel8.setText("SIP-Auth-ID");

        jLabel9.setText("SIP-PASSWORD");

        jLabel10.setText("SIP-LOCAL-MACHINE-UUID");

        jLabel11.setText("TRANSPORT");

        UUIDLocalMachine.setEditable(false);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        jLabel13.setText("Local Host Name");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(settingsSaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(closeButton)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(9, 9, 9)
                        .addComponent(UUIDLocalMachine, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
                        .addGap(15, 15, 15))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel13)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel6)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel8)
                                        .addComponent(jLabel9))
                                    .addGap(60, 60, 60))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGap(36, 36, 36)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(145, 145, 145)
                                        .addComponent(jLabel12))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(36, 36, 36)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(hostNameLocal)
                            .addComponent(localSipPort, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(localIp, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sipID, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(domain, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sipAthusername, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sipAuthPssd, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(transportProtocol, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(uASPort)
                            .addComponent(uASIP, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(91, 91, 91))))
            .addGroup(layout.createSequentialGroup()
                .addGap(222, 222, 222)
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(uASIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(uASPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hostNameLocal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(localIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(localSipPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sipID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(domain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sipAthusername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sipAuthPssd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(transportProtocol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(UUIDLocalMachine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(settingsSaveButton)
                    .addComponent(closeButton))
                .addGap(13, 13, 13))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
/**
     * Desc: 1- save the given parameters to an xml file, 2- initialize the SIP
     * listener
     *
     * @param evt
     */
    private void settingsSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsSaveButtonActionPerformed
        //the xml property file should be create/generated upon saving settings
        System.out.println("settingsSaveButtonActionPerformed");
        String uuid = "";
        String sipIdParam = this.sipID.getText();
        //Build the singleton Config File
        ConfVO conVO = ConfVO.getInstance();

        /*
         if the passed sip id is different then the existing one, then generate a new UUID, otherwise keep the first uuid
         */
        if (!sipIdParam.equalsIgnoreCase(conVO.getExtSipLocal())) {            
            uuid = ConfBO.getRandomUUID().toString();
        } else {
            uuid = this.UUIDLocalMachine.getText();
        }

        //update the Conf Singleton
        conVO.setUASIp(this.uASIP.getText());
        conVO.setUASPort(Integer.valueOf(this.uASPort.getText()));

        //local conf
        conVO.setUACIp(this.localIp.getText());
        conVO.setUACPort(Integer.valueOf(this.localSipPort.getText()));
        conVO.setHostNameLocal(this.hostNameLocal.getText());
        
        conVO.setExtSipLocal(sipIdParam);
        conVO.setDomain(this.domain.getText());
        conVO.setUsername(this.sipAthusername.getText());
        conVO.setPassword(this.sipAuthPssd.getText());
        conVO.setProtocol(this.transportProtocol.getText());
        conVO.setUuid(uuid);
        try {
            //save config to the xml file
            ConfBO.overwriteXMLConfig();

            //show a successfull message
            JOptionPane.showMessageDialog(this, "Settings Saved Successfully", "Settings:", JOptionPane.INFORMATION_MESSAGE);
            //close the Settings Frame
            dispose();

            //Refresh the Main Frame: update the registerSipURI in MAIN FRAME
            SipBLFUI.regisSipURI.setText(ConfBO.getRegisteredSipURI());
            
          
           //every time we save a settings we do the following:
            //1- remove the old Sip Stack by reset(); 2- initialize a new SIP Stack and Framework;
            if(sipClientController != null){
               //removing the previous listening points, sip provider, ect
                sipClientController.reset();
            }
            
            sipClientController = new ClientController();
          //creating the sip stack and the framework
            sipClientController.createSipStack();
            sipClientController.createSipFrameWork();
            //assign it to the Main interface used in Sign in button
            SipBLFUI.setSipClientController(sipClientController);
            
        } catch (Exception e) {            
            sipClientController = null;
            Logger.getLogger(SettingsUI.class.getName()).log(Level.SEVERE, null, e);
            // If an error occurs, display an error message box and exit.
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            //get PW error logs static var
            PrintWriter pw = printSingleton.getErrorLogsPW();
            try {
                PrintWriterObj.writePrintWriter(pw, e.getMessage());
            } catch (Exception ex) {
                Logger.getLogger(SettingsUI.class.getName()).log(Level.SEVERE, null, ex);
            }         
        }
        //initialize the stack         
    }//GEN-LAST:event_settingsSaveButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // on form open default settings should be loaded to the UI
        // get the singleton Config File
        // getRandomUUID();
        ConfVO confVO = ConfVO.getInstance();
        this.uASIP.setText(confVO.getUASIp());
        this.uASPort.setText(String.valueOf(confVO.getUASPort()));
        this.localIp.setText(confVO.getUACIp());
        this.localSipPort.setText(String.valueOf(confVO.getUACPort()));        
        this.hostNameLocal.setText(confVO.getHostNameLocal());
        this.sipID.setText(confVO.getExtSipLocal());
        this.domain.setText(confVO.getDomain());
        this.sipAthusername.setText(confVO.getUsername());
        this.sipAuthPssd.setText(confVO.getPassword());
        this.transportProtocol.setText(confVO.getProtocol());
        this.UUIDLocalMachine.setText(confVO.getUuid());
    }//GEN-LAST:event_formWindowOpened

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SettingsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SettingsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SettingsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SettingsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SettingsUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField UUIDLocalMachine;
    private javax.swing.JButton closeButton;
    private javax.swing.JTextField domain;
    private javax.swing.JTextField hostNameLocal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField localIp;
    private javax.swing.JTextField localSipPort;
    private javax.swing.JButton settingsSaveButton;
    private javax.swing.JTextField sipAthusername;
    private javax.swing.JTextField sipAuthPssd;
    private javax.swing.JTextField sipID;
    private javax.swing.JTextField transportProtocol;
    private javax.swing.JTextField uASIP;
    private javax.swing.JTextField uASPort;
    // End of variables declaration//GEN-END:variables
}
